//
//  FForEach.swift
//  ComponentSystem
//
//  Created by Duke Nguyen on 2024/10/11.
//
//  A non-rendering component used to generate and flatten a list of `FBodyComponent` views.
//  This is primarily used to support dynamic view iteration in layouts.
//

import UIKit
import DesignCore

/// A utility component that flattens a list of body components from dynamic data.
/// It is not a visible view and should be used only for layout generation.
public final class FForEach: FBodyComponent, Loggable {
    /// An optional closure for applying additional configuration during layout processing.
    public var customConfiguration: ((FForEach) -> Void)?
    /// The list of body components generated by the loop.
    public var contentViews: [FBodyComponent]
    
    /// Creates a new `FForEach` by mapping a list of data into body components.
    /// - Parameters:
    ///   - list: The data array to iterate over.
    ///   - content: A closure that returns a `FBodyComponent` for each element.
    public convenience init<T>(_ list: Array<T>, _ content: (T) -> FBodyComponent) {
        self.init(contentViews: list.map(content))
    }
    
    /// Initializes with a prebuilt list of body components.
    /// - Parameter contentViews: The body components to include.
    private init(contentViews: FBody) {
        self.contentViews = contentViews
        super.init(frame: .zero)
    }
    
    /// Flattens nested `FForEach` components and returns a plain array of body components.
    /// - Returns: A flattened array of body components.
    func content() -> [FBodyComponent] {
        contentViews.flatMap {
            (($0 as? FForEach)?.content() ?? [$0])
        }
    }
    
    @available(iOS, unavailable)
    public required init?(coder: NSCoder) {
        fatalError("Not implemented")
    }
    
    public override func didMoveToSuperview() {
        fatalError("FForEach is not considered a view")
    }
    
    public override func layoutSubviews() {
        fatalError("FForEach is not considered a view")
    }
    
    /// Logs deinitialization for debugging purposes.
    deinit {
        logger.trace("Deinitialized \(self)")
    }
}
